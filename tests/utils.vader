Include: _setup.vader

Execute (neomake#utils#LogMessage writes to logfile always):
  Save g:neomake_verbose g:neomake_logfile
  let neomake_verbose = 0
  let g:neomake_logfile = tempname()
  call neomake#utils#LogMessage(1, 'msg1')
  let logfile_msg = readfile(g:neomake_logfile)[0]
  Assert logfile_msg =~# '\v\[\d+-\d\d-\d\dT\d\d:\d\d:\d\d\+\d+ \@\d+\.\d\d\d, quiet\] msg1$'

Execute (NeomakeTestsEnsureExe creates exe):
  Assert !executable('boobar')
  call g:NeomakeTestsEnsureExe('boobar')
  Assert executable('boobar')

Execute (neomake#utils#CompressWhitespace):
  function! F(text)
    let entry = {'text': a:text}
    call neomake#utils#CompressWhitespace(entry)
    return entry.text
  endfunction
  AssertEqual F('foo'), 'foo'
  AssertEqual F(' foo'), 'foo'
  AssertEqual F('foo '), 'foo'
  AssertEqual F('foo bar '), 'foo bar'
  AssertEqual F("foo\nbar "), 'foo bar'
  AssertEqual F("foo\r\nbar "), 'foo bar'
  AssertEqual F("foo\n bar "), 'foo bar'
  AssertEqual F("foo\n bar \r\n"), 'foo bar'

Execute (neomake#utils#GetSetting serialize):
  let g:maker = {'name': 'mymaker'}
  function! GetSetting()
    return neomake#utils#GetSetting('serialize', g:maker, 'default',
                                  \ ['myft'], bufnr('%'))
  endfunction

  AssertEqual GetSetting(), 'default'
  let g:neomake_serialize = 5
  AssertEqual GetSetting(), 5
  let b:neomake_serialize = 4
  AssertEqual GetSetting(), 4
  let g:maker.serialize = 3
  AssertEqual GetSetting(), 3
  let g:neomake_myft_mymaker_serialize = 2
  AssertEqual GetSetting(), 2
  let b:neomake_myft_mymaker_serialize = 1
  AssertEqual GetSetting(), 1

Execute (neomake#utils#GetSetting accepts lists):
  let g:maker = {'name': 'mymaker'}
  function! GetSetting()
    return neomake#utils#GetSetting('args', g:maker, 'default',
                                  \ ['myft'], bufnr('%'))
  endfunction

  let g:neomake_myft_mymaker_args = [ 'global', 'shallow', 'list' ]
  AssertEqual GetSetting(), [ 'global', 'shallow', 'list' ]
  let b:neomake_myft_mymaker_args = [ 'buffer', 'shallow', 'list' ]
  AssertEqual GetSetting(), [ 'buffer', 'shallow', 'list' ]

Execute (neomake#utils#GetSetting without name):
  let g:maker = {}
  function! GetSetting()
    return neomake#utils#GetSetting('args', g:maker, [],
                                  \ ['myft'], bufnr('%'))
  endfunction
  AssertEqual GetSetting(), []

Execute(neomake#utils#redir):
  command! NeomakeTestCommand echo 1 | echo 2
  command! NeomakeTestErrorCommand echoerr 'error'
  AssertEqual neomake#utils#redir('echon 1'), "1"
  AssertEqual neomake#utils#redir('echo 1'), "\n1"
  AssertEqual neomake#utils#redir('NeomakeTestCommand'), "\n1\n2"
  AssertThrows call neomake#utils#redir('NeomakeTestErrorCommand')
  if exists('g:vader_exception')
    " https://github.com/junegunn/vader.vim/issues/86
    AssertEqual g:vader_exception, 'Vim(echoerr):error'
  endif
  AssertEqual neomake#utils#redir(['NeomakeTestCommand', 'echon 3']), "\n1\n23"
  AssertThrows neomake#utils#redir(['NeomakeTestCommand', 'echoerr 3'])

Execute (Should expand arguments that start with %):
  let param1 = '%'
  let param2 = '%:h'
  let param3 = '--param1=%:h'
  let args = [param1, param2, param3]
  let expected_args = [expand(param1), expand(param2), param3]
  call neomake#utils#ExpandArgs(args)
  AssertEqual expected_args, args

Execute (Should expand arguments that start with escape char \):
  let param1 = '\%'
  let param2 = '\%:p'
  let args = [param1, param2]
  let expected_args = [expand(param1), expand(param2)]
  call neomake#utils#ExpandArgs(args)
  AssertEqual expected_args, args

Execute (Should not expand arguments that start with double %):
  let args = ['%%:h', '%%']
  let expected_args = ['%%:h', '%%']
  call neomake#utils#ExpandArgs(args)
  AssertEqual expected_args, args

Execute(neomake#utils#ParseSemanticVersion):
  " http://semver.org/#spec-item-2
  " A normal version number MUST take the form X.Y.Z
  AssertEqual neomake#utils#ParseSemanticVersion('11.1.2016'), {'major': 11, 'minor': 1, 'patch': 2016, 'stage': [], 'metadata': []}
  AssertEqual neomake#utils#ParseSemanticVersion('0.3.6'), {'major': 0, 'minor': 3, 'patch': 6, 'stage': [], 'metadata': []}

  " where X, Y, and Z are non-negative integers
  AssertEqual neomake#utils#ParseSemanticVersion('0.-3.6'), {}

  " and MUST NOT contain leading zeroes
  AssertEqual neomake#utils#ParseSemanticVersion('0.03.6'), {}

  " http://semver.org/#spec-item-9
  " A pre-release version MAY be denoted by appending a hyphen and a series of
  " dot separated identifiers immediately following the patch version.
  AssertEqual neomake#utils#ParseSemanticVersion('1.0.0-alpha'), {'major': 1, 'minor': 0, 'patch': 0, 'stage': ['alpha'], 'metadata': []}
  AssertEqual neomake#utils#ParseSemanticVersion('1.0.0-alpha.1'), {'major': 1, 'minor': 0, 'patch': 0, 'stage': ['alpha', 1], 'metadata': []}
  AssertEqual neomake#utils#ParseSemanticVersion('1.0.0-0.3.7'), {'major': 1, 'minor': 0, 'patch': 0, 'stage': [0, 3, 7], 'metadata': []}
  AssertEqual neomake#utils#ParseSemanticVersion('1.0.0-x.7.z.92'), {'major': 1, 'minor': 0, 'patch': 0, 'stage': ['x', 7, 'z', 92], 'metadata': []}

  " Identifiers MUST comprise only ASCII alphanumerics and hyphen [0-9A-Za-z-].
  AssertEqual neomake#utils#ParseSemanticVersion('1.0.0-alpha*'), {}

  " Identifiers MUST NOT be empty.
  AssertEqual neomake#utils#ParseSemanticVersion('1.0.0-'), {}
  AssertEqual neomake#utils#ParseSemanticVersion('1.0.0-alpha..1'), {}

  " Numeric identifiers MUST NOT include leading zeroes.
  AssertEqual neomake#utils#ParseSemanticVersion('1.0.0-alpha.01'), {}

  " http://semver.org/#spec-item-10
  " Build metadata MAY be denoted by appending a plus sign and a series of dot
  " separated identifiers immediately following the patch or pre-release version.
  AssertEqual neomake#utils#ParseSemanticVersion('1.0.0-alpha+001'), {'major': 1, 'minor': 0, 'patch': 0, 'stage': ['alpha'], 'metadata': ['001']}
  AssertEqual neomake#utils#ParseSemanticVersion('1.0.0+20130313144700'), {'major': 1, 'minor': 0, 'patch': 0, 'stage': [], 'metadata': ['20130313144700']}
  AssertEqual neomake#utils#ParseSemanticVersion('1.0.0-beta+exp.sha.5114f85'), {'major': 1, 'minor': 0, 'patch': 0, 'stage': ['beta'], 'metadata': ['exp', 'sha', '5114f85']}

  " Identifiers MUST comprise only ASCII alphanumerics and hyphen [0-9A-Za-z-].
  AssertEqual neomake#utils#ParseSemanticVersion('1.0.0+20130313144700..1'), {}

  " Identifiers MUST NOT be empty.
  AssertEqual neomake#utils#ParseSemanticVersion('1.0.0+'), {}
  AssertEqual neomake#utils#ParseSemanticVersion('1.0.0+alpha..1'), {}

Execute(neomake#utils#CompareSemanticVersions):
  " http://semver.org/#spec-item-11
  " Precedence is determined by the first difference when comparing each of
  " these identifiers from left to right as follows: Major, minor, and patch
  " versions are always compared numerically.
  AssertEqual neomake#utils#CompareSemanticVersions('1.0.0', '2.0.0'), -1
  AssertEqual neomake#utils#CompareSemanticVersions('2.0.0', '2.1.0'), -1
  AssertEqual neomake#utils#CompareSemanticVersions('2.1.0', '2.1.1'), -1
  AssertEqual neomake#utils#CompareSemanticVersions('2.1.0', '2.1.0'), 0
  AssertEqual neomake#utils#CompareSemanticVersions('2.1.1', '2.1.0'), 1

  " When major, minor, and patch are equal, a pre-release version has lower
  " precedence than a normal version.
  AssertEqual neomake#utils#CompareSemanticVersions('1.0.0-alpha', '1.0.0'), -1
  AssertEqual neomake#utils#CompareSemanticVersions('1.0.0', '1.0.0-alpha'), 1
  AssertEqual neomake#utils#CompareSemanticVersions('1.0.0-alpha', '1.0.0-alpha'), 0

  " Precedence MUST be calculated by separating the version into major, minor,
  " patch and pre-release identifiers in that order
  AssertEqual neomake#utils#CompareSemanticVersions('1.0.0-alpha', '1.0.0-alpha.1'), -1
  AssertEqual neomake#utils#CompareSemanticVersions('1.0.0-alpha.1', '1.0.0-alpha.beta'), -1

  " Numeric identifiers always have lower precedence than non-numeric identifiers.
  AssertEqual neomake#utils#CompareSemanticVersions('1.0.0-alpha.beta', '1.0.0-beta'), -1

  " A larger set of pre-release fields has a higher precedence than a smaller
  " set, if all of the preceding identifiers are equal.
  AssertEqual neomake#utils#CompareSemanticVersions('1.0.0-beta', '1.0.0-beta.2'), -1

  " Precedence for two pre-release versions with the same major, minor, and patch
  " version MUST be determined by comparing each dot separated identifier from left
  " to right until a difference is found as follows:
  " identifiers consisting of only digits are compared numerically
  AssertEqual neomake#utils#CompareSemanticVersions('1.0.0-beta.2', '1.0.0-beta.11'), -1

  " and identifiers with letters or hyphens are compared lexically in ASCII
  " sort order
  AssertEqual neomake#utils#CompareSemanticVersions('1.0.0-beta.11', '1.0.0-rc.1'), -1
  AssertEqual neomake#utils#CompareSemanticVersions('1.0.0-rc.1', '1.0.0'), -1

  " (Build metadata does not figure into precedence)
  AssertEqual neomake#utils#CompareSemanticVersions('1.0.0-rc.1', '1.0.0-rc.1+sha.xyz'), 0
