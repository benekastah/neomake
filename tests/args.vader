Include: include/setup.vader

Execute (neomake#GetMakers):
  let maker = {
        \ 'exe': '/usr/bin/printf',
        \ 'args': ['%s\n', '1', '2', '3a 3b'],
        \ 'errorformat': '%f: %m',
        \ 'mapexpr': 'expand("%:p") . ": " . v:val',
        \ }

  let fname = 'a filename with spaces'
  file a\ filename\ with\ spaces
  AssertEqual bufname('%'), fname
  let fname_abs = expand('%:p')

  call neomake#Make(1, [maker])
  NeomakeTestsWaitForFinishedJobs
  AssertEqual map(copy(getloclist(0)), 'v:val.text'),
    \ ['1', '2', '3a 3b', fname_abs]

  let maker.args = "'%s\\n' 1 2 '3a 3b' 4"
  call neomake#Make(1, [maker])
  NeomakeTestsWaitForFinishedJobs
  AssertEqual map(copy(getloclist(0)), 'v:val.text'),
    \ ['1', '2', '3a 3b', '4', fname_abs]

Execute (dict function given as maker args value):
  let g:makerdict = {
    \ 'exe': '/usr/bin/printf',
    \ 'errorformat': '%f: %m',
    \ 'append_file': 0,
    \ }
  function! g:makerdict.args()
    return ['%s: %s', 'file1', 'exe: '.self.exe]
  endfunction
  call neomake#Make(1, [makerdict])
  NeomakeTestsWaitForFinishedJobs
  AssertEqual map(copy(getloclist(0)), 'v:val.text'), ['exe: /usr/bin/printf']

Execute (exe function given as maker exe value):
  function! g:Eref() dict
    return '/usr/bin/printf'
  endfunction
  let g:makerexe = {
    \ 'exe': function('g:Eref'),
    \ 'args':['%s %s\n', 'curfile:', 'exe'],
    \ 'errorformat': '%f: %m',
    \ 'append_file': 0,
    \ }
  call neomake#Make(1, [makerexe])
  NeomakeTestsWaitForFinishedJobs
  AssertEqual map(copy(getloclist(0)), 'v:val.text'), ['exe']
