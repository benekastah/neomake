Include: include/setup.vader

Execute (cargo skip non json line):
  let line = 'error: Could not compile `derive_more`.'

  Save &errorformat
  let &errorformat = neomake#makers#ft#rust#cargo().errorformat
  let error = neomake#makers#ft#rust#CargoMapexpr(line)

  AssertEqual 0, error

Execute (cargo info message):
  let json = '{"features":["default"],"filenames":["/home/jelte/fun/derive_more/target/debug/deps/libunicode_xid-2c56e0ed90f93244.rlib"],"package_id":"unicode-xid 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)","profile":{"debug_assertions":true,"debuginfo":true,"opt_level":"0","test":false},"reason":"compiler-artifact","target":{"kind":["lib"],"name":"unicode-xid","src_path":"/home/jelte/.cargo/registry/src/github.com-1ecc6299db9ec823/unicode-xid-0.0.3/src/lib.rs"}}'

  Save &errorformat
  let &errorformat = neomake#makers#ft#rust#cargo().errorformat
  let error = neomake#makers#ft#rust#CargoMapexpr(json)

  AssertEqual 0, error

Execute (cargo error without span):
  let json = '{"message":{"children":[],"code":null,"level":"error","message":"aborting due to 18 previous errors","rendered":null,"spans":[]},"package_id":"derive_more 0.4.0 (path+file:///home/jelte/fun/derive_more)","reason":"compiler-message","target":{"kind":["proc-macro"],"name":"derive_more","src_path":"/home/jelte/fun/derive_more/src/lib.rs"}}'

  Save &errorformat
  let &errorformat = neomake#makers#ft#rust#cargo().errorformat
  let error = neomake#makers#ft#rust#CargoMapexpr(json)

  AssertEqual 0, error


Execute (cargo error message):
  let json = '{"message":{"children":[{"children":[],"code":null,"level":"note","message":"expected type `&str`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"   found type `&proc_macro::TokenStream`","rendered":null,"spans":[]}],"code":{"code":"E0308","explanation":"\nThis error occurs when the compiler was unable to infer the concrete type of a\nvariable. It can occur for several cases, the most common of which is a\nmismatch in the expected type that the compiler inferred for a variables\ninitializing expression, and the actual type explicitly assigned to the\nvariable.\n\nFor example:\n\n```compile_fail,E0308\nlet x: i32 = \"I am not a number!\";\n//     ~~~   ~~~~~~~~~~~~~~~~~~~~\n//      |             |\n//      |    initializing expression;\n//      |    compiler infers type `&str`\n//      |\n//    type `i32` assigned to variable `x`\n```\n"},"level":"error","message":"mismatched types","rendered":null,"spans":[{"byte_end":437,"byte_start":435,"column_end":48,"column_start":46,"expansion":{"def_site_span":{"byte_end":537,"byte_start":181,"column_end":3,"column_start":1,"expansion":null,"file_name":"src/lib.rs","is_primary":false,"label":null,"line_end":23,"line_start":14,"suggested_replacement":null,"text":[{"highlight_end":28,"highlight_start":1,"text":"macro_rules! create_derive("},{"highlight_end":55,"highlight_start":1,"text":"    ($mod_:ident, $trait_:ident, $fn_name: ident) => {"},{"highlight_end":38,"highlight_start":1,"text":"        #[proc_macro_derive($trait_)]"},{"highlight_end":61,"highlight_start":1,"text":"        pub fn $fn_name(input: TokenStream) -> TokenStream {"},{"highlight_end":27,"highlight_start":1,"text":"            let s = input;"},{"highlight_end":59,"highlight_start":1,"text":"            let ast = syn::parse_macro_input(&s).unwrap();"},{"highlight_end":70,"highlight_start":1,"text":"            $mod_::expand(&ast, stringify!($trait_)).parse().unwrap()"},{"highlight_end":10,"highlight_start":1,"text":"        }"},{"highlight_end":6,"highlight_start":1,"text":"    }"},{"highlight_end":3,"highlight_start":1,"text":");"}]},"macro_decl_name":"create_derive!","span":{"byte_end":579,"byte_start":539,"column_end":41,"column_start":1,"expansion":null,"file_name":"src/lib.rs","is_primary":false,"label":null,"line_end":25,"line_start":25,"suggested_replacement":null,"text":[{"highlight_end":41,"highlight_start":1,"text":"create_derive!(from, From, from_derive);"}]}},"file_name":"src/lib.rs","is_primary":true,"label":"expected str, found struct `proc_macro::TokenStream`","line_end":19,"line_start":19,"suggested_replacement":null,"text":[{"highlight_end":48,"highlight_start":46,"text":"            let ast = syn::parse_macro_input(&s).unwrap();"}]}]},"package_id":"derive_more 0.4.0 (path+file:///home/jelte/fun/derive_more)","reason":"compiler-message","target":{"kind":["proc-macro"],"name":"derive_more","src_path":"/home/jelte/fun/derive_more/src/lib.rs"}}'

  Save &errorformat
  let &errorformat = neomake#makers#ft#rust#cargo().errorformat

  let error = neomake#makers#ft#rust#CargoMapexpr(json)

  AssertEqual '[E0308] "src/lib.rs" 19:46 2 mismatched types: expected str, found struct `proc_macro::TokenStream`', error

  cgetexpr error

  let result = getqflist()[0]
  unlet result.bufnr
  call neomake#makers#ft#rust#CargoPostProcess(result)

  AssertEqual {
    \ 'type': 'E',
    \ 'nr': 308,
    \ 'lnum': 19,
    \ 'col': 46,
    \ 'length': 2,
    \ 'valid': 1,
    \ 'vcol': 1,
    \ 'pattern': '',
    \ 'text': 'mismatched types: expected str, found struct `proc_macro::TokenStream`'}, result

Execute (cargo warning message):
  let json = '{"message":{"children":[],"code":null,"level":"warning","message":"unused import: `Variant`, #[warn(unused_imports)] on by default","rendered":null,"spans":[{"byte_end":8504,"byte_start":8497,"column_end":31,"column_start":24,"expansion":null,"file_name":"src/add_assign_like.rs","is_primary":true,"label":null,"line_end":2,"line_start":2,"suggested_replacement":null,"text":[{"highlight_end":31,"highlight_start":24,"text":"use syn::{Body, Ident, Variant, VariantData, MacroInput};"}]}]},"package_id":"derive_more 0.4.0 (path+file:///home/jelte/fun/derive_more)","reason":"compiler-message","target":{"kind":["proc-macro"],"name":"derive_more","src_path":"/home/jelte/fun/derive_more/src/lib.rs"}}'

  Save &errorformat
  let &errorformat = neomake#makers#ft#rust#cargo().errorformat

  let error = neomake#makers#ft#rust#CargoMapexpr(json)

  AssertEqual '[W] "src/add_assign_like.rs" 2:24 7 unused import: `Variant`, #[warn(unused_imports)] on by default', error

  cgetexpr error

  let result = getqflist()[0]
  unlet result.bufnr

  call neomake#makers#ft#rust#CargoPostProcess(result)

  AssertEqual {
    \ 'type': 'W',
    \ 'nr': -1,
    \ 'lnum': 2,
    \ 'col': 24,
    \ 'length': 7,
    \ 'valid': 1,
    \ 'vcol': 1,
    \ 'pattern': '',
    \ 'text': 'unused import: `Variant`, #[warn(unused_imports)] on by default'}, result
